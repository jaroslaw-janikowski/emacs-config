(require 'company)
(require 'cl-lib)

(defvar attr-completions
  '(
	#("hx-boost" 0 1 (:annotation "Attr" :help ""))
	#("hx-get" 0 1 (:annotation "Attr" :help ""))
	#("hx-confirm" 0 1 (:annotation "Attr" :help ""))
	#("hx-delete" 0 1 (:annotation "Attr" :help ""))
	#("hx-disable" 0 1 (:annotation "Attr" :help ""))
	#("hx-ext" 0 1 (:annotation "Attr" :help ""))
	#("hx-select" 0 1 (:annotation "Attr" :help ""))
	#("hx-select-oob" 0 1 (:annotation "Attr" :help ""))
	#("hx-sse" 0 1 (:annotation "Attr" :help ""))
	#("hx-include" 0 1 (:annotation "Attr" :help ""))
	#("hx-indicator" 0 1 (:annotation "Attr" :help ""))
	#("hx-on:click" 0 1 (:annotation "Attr" :help ""))
	#("hx-on:htmx:validation:validate" 0 1 (:annotation "Attr" :help ""))
	#("hx-on:htmx:config-request" 0 1 (:annotation "Attr" :help ""))
	#("hx-put" 0 1 (:annotation "Attr" :help ""))
	#("hx-push-url" 0 1 (:annotation "Attr" :help ""))
	#("hx-post" 0 1 (:annotation "Attr" :help ""))
	#("hx-patch" 0 1 (:annotation "Attr" :help ""))
	#("hx-params" 0 1 (:annotation "Attr" :help ""))
	#("hx-preserve" 0 1 (:annotation "Attr" :help ""))
	#("hx-swap" 0 1 (:annotation "Attr" :help ""))
	#("hx-swap-oob" 0 1 (:annotation "Attr" :help ""))
	#("hx-sync" 0 1 (:annotation "Attr" :help ""))
	#("hx-target" 0 1 (:annotation "Attr" :help ""))
	#("hx-trigger" 0 1 (:annotation "Attr" :help ""))
	#("hx-encoding" 0 1 (:annotation "Attr" :help ""))
	#("hx-ws" 0 1 (:annotation "Attr" :help ""))
	))

(defvar company-htmlx--current-context "")

(defun get-completions (context prefix)
  (cl-remove-if-not (lambda (c) (string-prefix-p prefix c))
					(cond
					 ((and (> (length context) 1) (string-prefix-p "<" context)) attr-completions)
					 (t nil))))

(defun company-htmlx-annotation (s)
  (format " %s" (get-text-property 0 :annotation s)))

(defun company-htmlx-meta (s)
  (get-text-property 0 :help s))

(defun company-htmlx (command &optional arg &rest ignored)
  (interactive (list 'interactive))
  (cl-case command
	(interactive (company-begin-backend 'company-htmlx))
	(prefix (when (looking-back "\\([<]*?[^</>]*?\\)\\([a-zA-Z-]+\\)" 50 t)
			  (setq company-htmlx--current-context (match-string 1))
			  ;; (message ":%s:%s:" company-htmlx--current-context (match-string 2))
			  (match-string 2)))
	(candidates (get-completions company-htmlx--current-context arg))
	(meta (company-htmlx-meta arg))
	(annotation (company-htmlx-annotation arg))
	(post-completion (when (string= (company-htmlx-annotation arg) " Attr")
					   ;; (message "post-completion:%s" arg)
					   (insert "=\"\"")
					   (backward-char 1)))
	(kind t)))

(provide 'company-htmlx)
