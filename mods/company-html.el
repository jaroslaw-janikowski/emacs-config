(require 'company)
(require 'cl-lib)

(defconst tag-completions
  '(
	#("a" 0 1 (:annotation "Tag" :help "Defines a hyperlink."))
	#("abbr" 0 1 (:annotation "Tag" :help "Defines an abbreviation or an acronym."))
	#("acronym" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use <abbr> instead."))
	#("address" 0 1 (:annotation "Tag" :help "Defines contact information for the author/owner of a document."))
	#("applet" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use <embed> or <object>."))
	#("area" 0 1 (:annotation "Tag" :help "Defines an area inside an image map."))
	#("article" 0 1 (:annotation "Tag" :help "Defines an article."))
	#("aside" 0 1 (:annotation "Tag" :help "Defines content aside from the page content."))
	#("audio" 0 1 (:annotation "Tag" :help "Defines embedded sound content."))
	#("b" 0 1 (:annotation "Tag" :help "Defines bold text."))
	#("base" 0 1 (:annotation "Tag" :help "Specifies the base URL/taret for all relative URLs in a document."))
	#("basefont" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use CSS instead."))
	#("bdi" 0 1 (:annotation "Tag" :help "Isolates a part of text that might be formatted in a different direction from other text outside it."))
	#("bdo" 0 1 (:annotation "Tag" :help "Overrides the current text direction."))
	#("big" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use CSS instead. Defines big text."))
	#("blockquote" 0 1 (:annotation "Tag" :help "Defines a section that is quoted from another source."))
	#("body" 0 1 (:annotation "Tag" :help "Defines the document's body."))
	#("br" 0 1 (:annotation "Tag" :help "Defines a single line break."))
	#("button" 0 1 (:annotation "Tag" :help "Defines a clickable button."))
	#("canvas" 0 1 (:annotation "Tag" :help "Used to draw graphics, on the fly, via scripting."))
	#("caption" 0 1 (:annotation "Tag" :help "Defines a table caption."))
	#("center" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use CSS instead. Defines centered text."))
	#("cite" 0 1 (:annotation "Tag" :help "Defines the title of a work."))
	#("code" 0 1 (:annotation "Tag" :help "Defines a piece of computer code."))
	#("col" 0 1 (:annotation "Tag" :help "Specifies column properties for each column within a <colgroup> element."))
	#("colgroup" 0 1 (:annotation "Tag" :help "Specifies a group of one or more columns in a table for formatting."))
	#("data" 0 1 (:annotation "Tag" :help "Adds a machine-readable translation of a given content."))
	#("datalist" 0 1 (:annotation "Tag" :help "Specifies a list of pre-defined options for input controls."))
	#("dd" 0 1 (:annotation "Tag" :help "Defines a description/value of a term in a description list."))
	#("del" 0 1 (:annotation "Tag" :help "Defines text that has been deleted from a document."))
	#("details" 0 1 (:annotation "Tag" :help "Defines additional details that the user can view or hide."))
	#("dfn" 0 1 (:annotation "Tag" :help "Specifies a term that is going to be defined within the content."))
	#("dialog" 0 1 (:annotation "Tag" :help "Defines a dialog box or window."))
	#("dir" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use <ul> instead. Defines a director list."))
	#("div" 0 1 (:annotation "Tag" :help "Defines a section in a document."))
	#("dl" 0 1 (:annotation "Tag" :help "Defines a description list."))
	#("dt" 0 1 (:annotation "Tag" :help "Defines a term/name in a description list."))
	#("em" 0 1 (:annotation "Tag" :help "Defines emphasized text."))
	#("embed" 0 1 (:annotation "Tag" :help "Defines a container for an external application."))
	#("fieldset" 0 1 (:annotation "Tag" :help "Groups related elements in a form."))
	#("figcaption" 0 1 (:annotation "Tag" :help "Defines a caption for a <figure> element."))
	#("figure" 0 1 (:annotation "Tag" :help "Specifies self-contained content."))
	#("font" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use CSS instead. Defines font, color, and size for text."))
	#("footer" 0 1 (:annotation "Tag" :help "Defines a footer for a document or section."))
	#("form" 0 1 (:annotation "Tag" :help "Defines an HTML form for user input."))
	#("frame" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Defines a window (a frame) in a frameset."))
	#("frameset" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Defines a set of frames."))
	#("h1" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("h2" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("h3" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("h4" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("h5" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("h6" 0 1 (:annotation "Tag" :help "Defines HTML headings."))
	#("head" 0 1 (:annotation "Tag" :help "Contains metadata/information for the document."))
	#("header" 0 1 (:annotation "Tag" :help "Defines a header for a document or section."))
	#("hgroup" 0 1 (:annotation "Tag" :help "Defines a header and related content."))
	#("hr" 0 1 (:annotation "Tag" :help "Defines a thematic change in the content."))
	#("html" 0 1 (:annotation "Tag" :help "Defines the root of an HTML document."))
	#("i" 0 1 (:annotation "Tag" :help "Defines a part of text in an alternate voice or mood."))
	#("iframe" 0 1 (:annotation "Tag" :help "Defines an inline frame."))
	#("img" 0 1 (:annotation "Tag" :help "Defines an image."))
	#("input" 0 1 (:annotation "Tag" :help "Defines an input control."))
	#("ins" 0 1 (:annotation "Tag" :help "Defines a text that has been inserted into a document."))
	#("kbd" 0 1 (:annotation "Tag" :help "Defines keyboard input."))
	#("label" 0 1 (:annotation "Tag" :help "Defines a label for an <input> element."))
	#("legend" 0 1 (:annotation "Tag" :help "Defines a caption for a <fieldset> element."))
	#("li" 0 1 (:annotation "Tag" :help "Defins a list."))
	#("link" 0 1 (:annotation "Tag" :help "Defines the relationship between a document and an external resource."))
	#("main" 0 1 (:annotation "Tag" :help "Specifies the main content of a document."))
	#("map" 0 1 (:annotation "Tag" :help "Defines an image map."))
	#("mark" 0 1 (:annotation "Tag" :help "Defines marked/highlighted text."))
	#("menu" 0 1 (:annotation "Tag" :help "Defines an unordered list."))
	#("meta" 0 1 (:annotation "Tag" :help "Defines metadata about an HTML doucment."))
	#("meter" 0 1 (:annotation "Tag" :help "Defines a scalar measurement within a known range."))
	#("nav" 0 1 (:annotation "Tag" :help "Defines navigation links."))
	#("noframes" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Defines an alternate content for no support frames."))
	#("noscript" 0 1 (:annotation "Tag" :help "Defines an alternate content for users that do not support client-side scripts."))
	#("object" 0 1 (:annotation "Tag" :help "Defines a container for an external application."))
	#("ol" 0 1 (:annotation "Tag" :help "Defines an ordered list."))
	#("optgroup" 0 1 (:annotation "Tag" :help "Defines a group of related options in a drop-down list."))
	#("option" 0 1 (:annotation "Tag" :help "Defines an option in a drop-down list."))
	#("output" 0 1 (:annotation "Tag" :help "Defines the result of a calculation."))
	#("p" 0 1 (:annotation "Tag" :help "Defines a paragraph."))
	#("param" 0 1 (:annotation "Tag" :help "Defines a parameter for an object."))
	#("picture" 0 1 (:annotation "Tag" :help "Defines a container for multiple image resources."))
	#("pre" 0 1 (:annotation "Tag" :help "Defines preformatted text."))
	#("progress" 0 1 (:annotation "Tag" :help "Represents the progress of a task."))
	#("q" 0 1 (:annotation "Tag" :help "Defines a short quotation."))
	#("rp" 0 1 (:annotation "Tag" :help "Defines what to show in browsers that do not support ruby annotations."))
	#("rt" 0 1 (:annotation "Tag" :help "Defines an explanation/pronounciation of characters."))
	#("ruby" 0 1 (:annotation "Tag" :help "Defines a ruby annotation."))
	#("s" 0 1 (:annotation "Tag" :help "Defines text that is no longer correct."))
	#("samp" 0 1 (:annotation "Tag" :help "Defines sample output from a computer program."))
	#("script" 0 1 (:annotation "Tag" :help "Defines a client-side script."))
	#("search" 0 1 (:annotation "Tag" :help "Defines a search section."))
	#("section" 0 1 (:annotation "Tag" :help "Defines a section in a document."))
	#("select" 0 1 (:annotation "Tag" :help "Defines a section in a document."))
	#("samll" 0 1 (:annotation "Tag" :help "Defines smaller text."))
	#("source" 0 1 (:annotation "Tag" :help "Defines multiple media resources for media elements."))
	#("span" 0 1 (:annotation "Tag" :help "Defines a section in a document."))
	#("strike" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use <del> or <s>."))
	#("strong" 0 1 (:annotation "Tag" :help "Defines important text."))
	#("style" 0 1 (:annotation "Tag" :help "Defines style information for a document."))
	#("sub" 0 1 (:annotation "Tag" :help "Defines subscripted text."))
	#("summary" 0 1 (:annotation "Tag" :help "Defines a visible heading for <details> element."))
	#("sup" 0 1 (:annotation "Tag" :help "Defines superscripted text."))
	#("svg" 0 1 (:annotation "Tag" :help "Defines a container for SVG graphics."))
	#("table" 0 1 (:annotation "Tag" :help "Defines a table."))
	#("tbody" 0 1 (:annotation "Tag" :help "Groups the body content in a table."))
	#("td" 0 1 (:annotation "Tag" :help "Defines cell in a table."))
	#("template" 0 1 (:annotation "Tag" :help "Defines a container for content that should be hidden when the page loads."))
	#("textarea" 0 1 (:annotation "Tag" :help "Defines a multiline input control."))
	#("tfoot" 0 1 (:annotation "Tag" :help "Groups the footer content in a table."))
	#("th" 0 1 (:annotation "Tag" :help "Defines a header cell in a table."))
	#("thead" 0 1 (:annotation "Tag" :help "Groups the header content in a table."))
	#("time" 0 1 (:annotation "Tag" :help "Defines a specific time (or datetime)."))
	#("title" 0 1 (:annotation "Tag" :help "Defines a title for the document."))
	#("tr" 0 1 (:annotation "Tag" :help "Defines a row in a table."))
	#("track" 0 1 (:annotation "Tag" :help "Defines text tracks for media elements."))
	#("tt" 0 1 (:annotation "Tag" :help "Not supported in HTML5. Use CSS instead."))
	#("u" 0 1 (:annotation "Tag" :help "Defines some text that is unarticulated and styled differently from normal text."))
	#("ul" 0 1 (:annotation "Tag" :help "Defines an unordered list."))
	#("var" 0 1 (:annotation "Tag" :help "Defines a variable."))
	#("video" 0 1 (:annotation "Tag" :help "Defines embedded video content."))
	#("wbr" 0 1 (:annotation "Tag" :help "Defines a possible line-break."))
	#("!DOCTYPE" 0 1 (:annotation "Tag" :help "Defines document type."))
	))

(defconst entity-completions
  '(
	#("&amp;" 0 1 (:annotation "Entity" :help "Ampersand &"))
	#("&lt;" 0 1 (:annotation "Entity" :help "Less than <"))
	#("&gt;" 0 1 (:annotation "Entity" :help "Greater than >"))
	#("&iexcl;" 0 1 (:annotation "Entity" :help "Inverted exclamation mark ¡"))
	#("&cent;" 0 1 (:annotation "Entity" :help "Cent ¢"))
	#("&pound;" 0 1 (:annotation "Entity" :help "Pound £"))
	#("&curren;" 0 1 (:annotation "Entity" :help "Currency ¤"))
	#("&yen;" 0 1 (:annotation "Entity" :help "Yen ¥"))
	#("&nbsp;" 0 1 (:annotation "Entity" :help "Hard space"))
	#("&brvbar;" 0 1 (:annotation "Entity" :help "Broken vertical bar ¦"))
	#("&sect;" 0 1 (:annotation "Entity" :help "Section §"))
	#("&uml;" 0 1 (:annotation "Entity" :help "Spacing diaeresis ¨"))
	#("&copy;" 0 1 (:annotation "Entity" :help "Copyright ©"))
	#("&ordf;" 0 1 (:annotation "Entity" :help "Feminine ordinal indicator ª"))
	#("&laquo;" 0 1 (:annotation "Entity" :help "Opening/Left angle quotation «"))
	#("&not;" 0 1 (:annotation "Entity" :help "Negation ¬"))
	#("&shy;" 0 1 (:annotation "Entity" :help "Soft hyphen"))
	#("&reg;" 0 1 (:annotation "Entity" :help "Registered trademark ®"))
	#("&macr;" 0 1 (:annotation "Entity" :help "Spacing macron ¯"))
	#("&deg;" 0 1 (:annotation "Entity" :help "Degree °"))
	#("&plusnm;" 0 1 (:annotation "Entity" :help "Plus or minus ±"))
	#("&sup2;" 0 1 (:annotation "Entity" :help "Superscript 2 ²"))
	#("&sup3;" 0 1 (:annotation "Entity" :help "Superscript 3 ³"))
	#("&acute;" 0 1 (:annotation "Entity" :help "Spacing acute ´"))
	#("&micro;" 0 1 (:annotation "Entity" :help "Micro µ"))
	#("&para;" 0 1 (:annotation "Entity" :help "Paragraph ¶"))
	#("&cedil;" 0 1 (:annotation "Entity" :help "Spacing cedilla ¸"))
	#("&sup1;" 0 1 (:annotation "Entity" :help "Superscript 1 ¹"))
	#("&ordm;" 0 1 (:annotation "Entity" :help "Masculine ordinal indicator º"))
	#("&raquo;" 0 1 (:annotation "Entity" :help "Closing/Right angle quotation mark »"))
	#("&frac14;" 0 1 (:annotation "Entity" :help "Fraction 1/4 ¼"))
	#("&frac12;" 0 1 (:annotation "Entity" :help "Fraction 1/2 ½"))
	#("&frac34;" 0 1 (:annotation "Entity" :help "Fraction 3/4 ¾"))
	#("&iquest;" 0 1 (:annotation "Entity" :help "Inverted question mark ¿"))
	#("&times;" 0 1 (:annotation "Entity" :help "Multiplication ×"))
	#("&divide;" 0 1 (:annotation "Entity" :help "Divide ÷"))
	#("&forall;" 0 1 (:annotation "Entity" :help "For all ∀"))
	#("&part;" 0 1 (:annotation "Entity" :help "Part ∂"))
	#("&exist;" 0 1 (:annotation "Entity" :help "Exist ∃"))
	#("&empty;" 0 1 (:annotation "Entity" :help "Empty ∅"))
	#("&nabla;" 0 1 (:annotation "Entity" :help "Nabla ∇"))
	#("&isin;" 0 1 (:annotation "Entity" :help "Is in ∈"))
	#("&notin;" 0 1 (:annotation "Entity" :help "Not in ∉"))
	#("&ni;" 0 1 (:annotation "Entity" :help "Ni ∋"))
	#("&prod;" 0 1 (:annotation "Entity" :help "Product ∏"))
	#("&sum;" 0 1 (:annotation "Entity" :help "Sum ∑"))
	#("&minus;" 0 1 (:annotation "Entity" :help "Minus −"))
	#("&lowast;" 0 1 (:annotation "Entity" :help "Asterisk ∗"))
	#("&radic;" 0 1 (:annotation "Entity" :help "Square root √"))
	#("&prop;" 0 1 (:annotation "Entity" :help "Proportional to ∝"))
	#("&infin;" 0 1 (:annotation "Entity" :help "Infinity ∞"))
	#("&ang;" 0 1 (:annotation "Entity" :help "Angle ∠"))
	#("&and;" 0 1 (:annotation "Entity" :help "And ∧"))
	#("&or;" 0 1 (:annotation "Entity" :help "Or ∨"))
	#("&cap;" 0 1 (:annotation "Entity" :help "Cap ∩"))
	#("&cup;" 0 1 (:annotation "Entity" :help "Cup ∪"))
	#("&int;" 0 1 (:annotation "Entity" :help "Integral ∫"))
	#("&there4;" 0 1 (:annotation "Entity" :help "Therefore ∴"))
	#("&sim;" 0 1 (:annotation "Entity" :help "Similar to ∼"))
	#("&cong;" 0 1 (:annotation "Entity" :help "Congurent to ≅"))
	#("&asymp;" 0 1 (:annotation "Entity" :help "Almost equal ≈"))
	#("&ne;" 0 1 (:annotation "Entity" :help "Not equal ≠"))
	#("&equiv;" 0 1 (:annotation "Entity" :help "Equivalent ≡"))
	#("&le;" 0 1 (:annotation "Entity" :help "Less or equal ≤"))
	#("&ge;" 0 1 (:annotation "Entity" :help "Greater or equal ≥"))
	#("&sub;" 0 1 (:annotation "Entity" :help "Subset of ⊂"))
	#("&sup;" 0 1 (:annotation "Entity" :help "Superset of ⊃"))
	#("&nsub;" 0 1 (:annotation "Entity" :help "Not subset of ⊄"))
	#("&sube;" 0 1 (:annotation "Entity" :help "Subset or equal ⊆"))
	#("&supe;" 0 1 (:annotation "Entity" :help "Superset or equal ⊇"))
	#("&oplus;" 0 1 (:annotation "Entity" :help "Circled plus ⊕"))
	#("&otimes;" 0 1 (:annotation "Entity" :help "Circled times ⊗"))
	#("&perp;" 0 1 (:annotation "Entity" :help "Perpendicular ⊥"))
	#("&sdot;" 0 1 (:annotation "Entity" :help "Dot operator ⋅"))
	#("&Alpha;" 0 1 (:annotation "Entity" :help "Alpha Α"))
	#("&Beta;" 0 1 (:annotation "Entity" :help "Beta Β"))
	#("&Gamma;" 0 1 (:annotation "Entity" :help "Gamma Γ"))
	#("&Delta;" 0 1 (:annotation "Entity" :help "Delta Δ"))
	#("&Epsilon;" 0 1 (:annotation "Entity" :help "Epsilon Ε"))
	#("&Zeta;" 0 1 (:annotation "Entity" :help "Zeta Ζ"))
	#("&Eta;" 0 1 (:annotation "Entity" :help "Eta Η"))
	#("&Theta;" 0 1 (:annotation "Entity" :help "Theta Θ"))
	#("&Iota;" 0 1 (:annotation "Entity" :help "Iota Ι"))
	#("&Kappa;" 0 1 (:annotation "Entity" :help "Kappa Κ"))
	#("&Lambda;" 0 1 (:annotation "Entity" :help "Lambda Λ"))
	#("&Mu;" 0 1 (:annotation "Entity" :help "Mu Μ"))
	#("&Nu;" 0 1 (:annotation "Entity" :help "Nu Ν"))
	#("&Xi;" 0 1 (:annotation "Entity" :help "Xi Ξ"))
	#("&Omicron;" 0 1 (:annotation "Entity" :help "Omicron Ο"))
	#("&Pi;" 0 1 (:annotation "Entity" :help "Pi Π"))
	#("&Rho;" 0 1 (:annotation "Entity" :help "Rho Ρ"))
	#("&Sigma;" 0 1 (:annotation "Entity" :help "Sigma Σ"))
	#("&Tau;" 0 1 (:annotation "Entity" :help "Tau Τ"))
	#("&Upsilon;" 0 1 (:annotation "Entity" :help "Upsilon Υ"))
	#("&Phi;" 0 1 (:annotation "Entity" :help "Phi Φ"))
	#("&Chi;" 0 1 (:annotation "Entity" :help "Chi Χ"))
	#("&Psi;" 0 1 (:annotation "Entity" :help "Psi Ψ"))
	#("&Omega;" 0 1 (:annotation "Entity" :help "Omega Ω"))
	#("&alpha;" 0 1 (:annotation "Entity" :help "alpha α"))
	#("&beta;" 0 1 (:annotation "Entity" :help "beta β"))
	#("&gamma;" 0 1 (:annotation "Entity" :help "gamma γ"))
	#("&delta;" 0 1 (:annotation "Entity" :help "delta δ"))
	#("&epsilon;" 0 1 (:annotation "Entity" :help "epsilon ε"))
	#("&zeta;" 0 1 (:annotation "Entity" :help "zeta ζ"))
	#("&eta;" 0 1 (:annotation "Entity" :help "eta η"))
	#("&theta;" 0 1 (:annotation "Entity" :help "theta θ"))
	#("&iota;" 0 1 (:annotation "Entity" :help "iota ι"))
	#("&kappa;" 0 1 (:annotation "Entity" :help "kappa κ"))
	#("&lambda;" 0 1 (:annotation "Entity" :help "lambda λ"))
	#("&mu;" 0 1 (:annotation "Entity" :help "mu μ"))
	#("&nu;" 0 1 (:annotation "Entity" :help "nu ν"))
	#("&xi;" 0 1 (:annotation "Entity" :help "xi ξ"))
	#("&omicron;" 0 1 (:annotation "Entity" :help "omicron ο"))
	#("&pi;" 0 1 (:annotation "Entity" :help "pi π"))
	#("&rho;" 0 1 (:annotation "Entity" :help "rho ρ"))
	#("&sigmaf;" 0 1 (:annotation "Entity" :help "sigmaf ς"))
	#("&sigma;" 0 1 (:annotation "Entity" :help "sigma σ"))
	#("&tau;" 0 1 (:annotation "Entity" :help "tau τ"))
	#("&upsilon;" 0 1 (:annotation "Entity" :help "upsilon υ"))
	#("&phi;" 0 1 (:annotation "Entity" :help "phi φ"))
	#("&chi;" 0 1 (:annotation "Entity" :help "chi χ"))
	#("&psi;" 0 1 (:annotation "Entity" :help "psi ψ"))
	#("&omega;" 0 1 (:annotation "Entity" :help "omega ω"))
	#("&thetasym;" 0 1 (:annotation "Entity" :help "theta symbol ϑ"))
	#("&upsih;" 0 1 (:annotation "Entity" :help "upsilon symbol ϒ"))
	#("&piv;" 0 1 (:annotation "Entity" :help "Pi symbol ϖ"))
	#("&OElig;" 0 1 (:annotation "Entity" :help "Uppercase ligature OE Œ"))
	#("&oelig;" 0 1 (:annotation "Entity" :help "Lowercase ligature OE œ"))
	#("&Scaron;" 0 1 (:annotation "Entity" :help "Uppercase S with caron Š"))
	#("&scaron;" 0 1 (:annotation "Entity" :help "Lowercase S with caron š"))
	#("&Yuml;" 0 1 (:annotation "Entity" :help "Capital Y with diaeres Ÿ"))
	#("&fnof;" 0 1 (:annotation "Entity" :help "Lowercase with hook ƒ"))
	#("&circ;" 0 1 (:annotation "Entity" :help "Circumflex accent ˆ"))
	#("&tilde;" 0 1 (:annotation "Entity" :help "Tilde ˜"))
	#("&ensp;" 0 1 (:annotation "Entity" :help "En space  "))
	#("&emsp;" 0 1 (:annotation "Entity" :help "Em space  "))
	#("&thinsp;" 0 1 (:annotation "Entity" :help "Thin space  "))
	#("&zwnj;" 0 1 (:annotation "Entity" :help "Zero width non-joiner"))
	#("&zwj;" 0 1 (:annotation "Entity" :help "Zero width joiner"))
	#("&lrm;" 0 1 (:annotation "Entity" :help "Left-to-right mark"))
	#("&rlm;" 0 1 (:annotation "Entity" :help "Right-to-left mark"))
	#("&ndash;" 0 1 (:annotation "Entity" :help "En dash –"))
	#("&mdash;" 0 1 (:annotation "Entity" :help "Em dash —"))
	#("&lsquo;" 0 1 (:annotation "Entity" :help "Left single quotation mark ‘"))
	#("&rsquo;" 0 1 (:annotation "Entity" :help "Right single quotation mark ’"))
	#("&sbquo;" 0 1 (:annotation "Entity" :help "Single low-9 quotation mark ‚"))
	#("&ldquo;" 0 1 (:annotation "Entity" :help "Left double quotation mark “"))
	#("&rdquo;" 0 1 (:annotation "Entity" :help "Right double quotation mark ”"))
	#("&bdquo;" 0 1 (:annotation "Entity" :help "Double low-9 quotation mark „"))
	#("&dagger;" 0 1 (:annotation "Entity" :help "Dagger †"))
	#("&Dagger;" 0 1 (:annotation "Entity" :help "Double dagger ‡"))
	#("&bull;" 0 1 (:annotation "Entity" :help "Bullet •"))
	#("&hellip;" 0 1 (:annotation "Entity" :help "Horizontal ellipsis …"))
	#("&permil;" 0 1 (:annotation "Entity" :help "Per mille ‰"))
	#("&prime;" 0 1 (:annotation "Entity" :help "Minutes (Degrees) ′"))
	#("&Prime;" 0 1 (:annotation "Entity" :help "Seconds (Degrees) ″"))
	#("&lsaquo;" 0 1 (:annotation "Entity" :help "Single left angle quotation ‹"))
	#("&rsaquo;" 0 1 (:annotation "Entity" :help "Single right angle quotation ›"))
	#("&oline;" 0 1 (:annotation "Entity" :help "Overline ‾"))
	#("&euro;" 0 1 (:annotation "Entity" :help "Euro €"))
	#("&trade;" 0 1 (:annotation "Entity" :help "Trademark ™"))
	#("&larr;" 0 1 (:annotation "Entity" :help "Left arrow ←"))
	#("&uarr;" 0 1 (:annotation "Entity" :help "Up arrow ↑"))
	#("&rarr;" 0 1 (:annotation "Entity" :help "Right arrow →"))
	#("&darr;" 0 1 (:annotation "Entity" :help "Down arrow ↓"))
	#("&harr;" 0 1 (:annotation "Entity" :help "Left right arrow ↔"))
	#("&crarr;" 0 1 (:annotation "Entity" :help "Carriage return arrow ↵"))
	#("&lceil;" 0 1 (:annotation "Entity" :help "Left ceiling ⌈"))
	#("&rceil;" 0 1 (:annotation "Entity" :help "Right ceiling ⌉"))
	#("&lfloor;" 0 1 (:annotation "Entity" :help "Left floor ⌊"))
	#("&rfloor;" 0 1 (:annotation "Entity" :help "Right floor ⌋"))
	#("&loz;" 0 1 (:annotation "Entity" :help "Lozenge ◊"))
	#("&spades;" 0 1 (:annotation "Entity" :help "Spade ♠"))
	#("&clubs;" 0 1 (:annotation "Entity" :help "Club ♣"))
	#("&hearts;" 0 1 (:annotation "Entity" :help "Heart ♥"))
	#("&diams;" 0 1 (:annotation "Entity" :help "Diamond ♦"))
	))

(defvar company-html--current-context "")

(defun get-completions (context prefix)
  (cl-remove-if-not (lambda (c) (string-prefix-p prefix c))
					(cond
					 ((string= context "<") tag-completions)
					 ((string-prefix-p "&" prefix) entity-completions)
					 (t nil))))

(defun company-html-annotation (s)
  (format " %s" (get-text-property 0 :annotation s)))

(defun company-html-meta (s)
  (get-text-property 0 :help s))

(defun company-html (command &optional arg &rest ignored)
  (interactive (list 'interactive))
  (cl-case command
	(interactive (company-begin-backend 'company-html))
	(prefix (when (looking-back "\\([<]?\\)\\([a-zA-Z1-6!&]+\\)" 12 t)
			  (progn
				(setq company-html--current-context (match-string 1))
				;; (message "%s - %s" company-html--current-context (match-string 2))
				(match-string 2))))
	(candidates (get-completions company-html--current-context arg))
	(meta (company-html-meta arg))
	(annotation (company-html-annotation arg))))

(provide 'company-html)
