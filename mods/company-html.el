(require 'yasnippet)

(yas-define-snippets 'mhtml-mode '(
				   ("&amp;" "&amp;$0" "Ampersand &")
				   ("&lt;" "&lt;$0" "Less than <")
				   ("&gt;" "&gt;$0" "Greater than >")
				   ("&iexcl;" "&iexcl;$0" "Inverted exclamation mark ¡")
				   ("&cent;" "&cent;$0" "Cent ¢")
				   ("&pound;" "&pound;$0" "Pound £")
				   ("&curren;" "&curren;$0" "Currency ¤")
				   ("&yen;" "&yen;$0" "Yen ¥")
				   ("&nbsp;" "&nbsp;$0" "Hard space")
				   ("&brvbar;" "&brvbar;$0" "Broken vertical bar ¦")
				   ("&sect;" "&sect;$0" "Section §")
				   ("&uml;" "&uml;$0" "Spacing diaeresis ¨")
				   ("&copy;" "&copy;$0" "Copyright ©")
				   ("&ordf;" "&ordf;$0" "Feminine ordinal indicator ª")
				   ("&laguo;" "&laquo;$0" "Opening/Left angle quotation «")
				   ("&not;" "&not;$0" "Negation ¬")
				   ("&shy;" "&shy;$0" "Soft hyphen")
				   ("&reg;" "&reg;$0" "Registered trademark ®")
				   ("&macr;" "&macr;$0" "Spacing macron ¯")
				   ("&deg;" "&deg;$0" "Degree °")
				   ("&plusnm;" "&plusnm;$0" "Plus or minus ±")
				   ("&sup2;" "&sup2;$0" "Superscript 2 ²")
				   ("&sup3;" "&sup3;$0" "Superscript 3 ³")
				   ("&acute;" "&acute;$0" "Spacing acute ´")
				   ("&micro;" "&micro;$0" "Micro µ")
				   ("&para;" "&para;$0" "Paragraph ¶")
				   ("&cedil;" "&cedil;$0" "Spacing cedilla ¸")
				   ("&supl;" "&sup1;$0" "Superscript 1 ¹")
				   ("&ormd;" "&ordm;$0" "Masculine ordinal indicator º")
				   ("&raguo;" "&raquo;$0" "Closing/Right angle quotation mark »")
				   ("&frac14;" "&frac14;$0" "Fraction 1/4 ¼")
				   ("&frac12;" "&frac12;$0" "Fraction 1/2 ½")
				   ("&frac34;" "&frac34;$0" "Fraction 3/4 ¾")
				   ("&iquest;" "&iquest;$0" "Inverted question mark ¿")
				   ("&times;" "&times;$0" "Multiplication ×")
				   ("&divide;" "&divide;$0" "Divide ÷")
				   ("&forall;" "&forall;$0" "For all ∀")
				   ("&part;" "&part;$0" "Part ∂")
				   ("&exist;" "&exist;$0" "Exist ∃")
				   ("&empty;" "&empty;$0" "Empty ∅")
				   ("&nabla;" "&nabla;$0" "Nabla ∇")
				   ("&isin;" "&isin;$0" "Is in ∈")
				   ("&notin;" "&notin;$0" "Not in ∉")
				   ("&ni;" "&ni;$0" "Ni ∋")
				   ("&prod;" "&prod;$0" "Product ∏")
				   ("&sum;" "&sum;$0" "Sum ∑")
				   ("&minus;" "&minus;$0" "Minus −")
				   ("&lowast;" "&lowast;$0" "Asterisk ∗")
				   ("&radic;" "&radic;$0" "Square root √")
				   ("&prop;" "&prop;$0" "Proportional to ∝")
				   ("&infin;" "&infin;$0" "Infinity ∞")
				   ("&ang;" "&ang;$0" "Angle ∠")
				   ("&and;" "&and;$0" "And ∧")
				   ("&or;" "&or;$0" "Or ∨")
				   ("&cap;" "&cap;$0" "Cap ∩")
				   ("&cup;" "&cup;$0" "Cup ∪")
				   ("&int;" "&int;$0" "Integral ∫")
				   ("&there4;" "&there4;$0" "Therefore ∴")
				   ("&sim;" "&sim;$0" "Similar to ∼")
				   ("&cong;" "&cong;$0" "Congurent to ≅")
				   ("&asymp;" "&asymp;$0" "Almost equal ≈")
				   ("&ne;" "&ne;$0" "Not equal ≠")
				   ("&equiv;" "&equiv;$0" "Equivalent ≡")
				   ("&le;" "&le;$0" "Less or equal ≤")
				   ("&ge;" "&ge;$0" "Greater or equal ≥")
				   ("&sub;" "&sub;$0" "Subset of ⊂")
				   ("&sup;" "&sup;$0" "Superset of ⊃")
				   ("&nsub;" "&nsub;$0" "Not subset of ⊄")
				   ("&sube;" "&sube;$0" "Subset or equal ⊆")
				   ("&supe;" "&supe;$0" "Superset or equal ⊇")
				   ("&oplus;" "&oplus;$0" "Circled plus ⊕")
				   ("&optimes;" "&otimes;$0" "Circled times ⊗")
				   ("&perp;" "&perp;$0" "Perpendicular ⊥")
				   ("&sdot;" "&sdot;$0" "Dot operator ⋅")
				   ("&Alpha;" "&Alpha;$0" "Alpha Α")
				   ("&Beta;" "&Beta;$0" "Beta Β")
				   ("&Gamma;" "&Gamma;$0" "Gamma Γ")
				   ("&Delta;" "&Delta;$0" "Delta Δ")
				   ("&Epsilon;" "&Epsilon;$0" "Epsilon Ε")
				   ("&Zeta;" "&Zeta;$0" "Zeta Ζ")
				   ("&Eta;" "&Eta;$0" "Eta Η")
				   ("&Theta;" "&Theta;$0" "Theta Θ")
				   ("&Iota;" "&Iota;$0" "Iota Ι")
				   ("&Kappa;" "&Kappa;$0" "Kappa Κ")
				   ("&Lambda;" "&Lambda;$0" "Lambda Λ")
				   ("&Mu;" "&Mu;$0" "Mu Μ")
				   ("&Nu;" "&Nu;$0" "Nu Ν")
				   ("&Xi;" "&Xi;$0" "Xi Ξ")
				   ("&Omicron;" "&Omicron;$0" "Omicron Ο")
				   ("&Pi;" "&Pi;$0" "Pi Π")
				   ("&Rho;" "&Rho;$0" "Rho Ρ")
				   ("&Sigma;" "&Sigma;$0" "Sigma Σ")
				   ("&Tau;" "&Tau;$0" "Tau Τ")
				   ("&Upsilon;" "&Upsilon;$0" "Upsilon Υ")
				   ("&Phi;" "&Phi;$0" "Phi Φ")
				   ("&Chi;" "&Chi;$0" "Chi Χ")
				   ("&Psi;" "&Psi;$0" "Psi Ψ")
				   ("&Omega;" "&Omega;$0" "Omega Ω")
				   ("&alpha;" "&alpha;$0" "alpha α")
				   ("&beta;" "&beta;$0" "beta β")
				   ("&gamma;" "&gamma;$0" "gamma γ")
				   ("&delta;" "&delta;$0" "delta δ")
				   ("&epsilon;" "&epsilon;$0" "epsilon ε")
				   ("&zeta;" "&zeta;$0" "zeta ζ")
				   ("&eta;" "&eta;$0" "eta η")
				   ("&theta;" "&theta;$0" "theta θ")
				   ("&iota;" "&iota;$0" "iota ι")
				   ("&kappa;" "&kappa;$0" "kappa κ")
				   ("&lambda;" "&lambda;$0" "lambda λ")
				   ("&mu;" "&mu;$0" "mu μ")
				   ("&nu;" "&nu;$0" "nu ν")
				   ("&xi;" "&xi;$0" "xi ξ")
				   ("&omicron;" "&omicron;$0" "omicron ο")
				   ("&pi;" "&pi;$0" "pi π")
				   ("&rho;" "&rho;$0" "rho ρ")
				   ("&sigmaf;" "&sigmaf;$0" "sigmaf ς")
				   ("&sigma;" "&sigma;$0" "sigma σ")
				   ("&tau;" "&tau;$0" "tau τ")
				   ("&upsilon;" "&upsilon;$0" "upsilon υ")
				   ("&phi;" "&phi;$0" "phi φ")
				   ("&chi;" "&chi;$0" "chi χ")
				   ("&psi;" "&psi;$0" "psi ψ")
				   ("&omega;" "&omega;$0" "omega ω")
				   ("&thetasym;" "&thetasym;$0" "theta symbol ϑ")
				   ("&upsih;" "&upsih;$0" "upsilon symbol ϒ")
				   ("&piy;" "&piv;$0" "Pi symbol ϖ")
				   ("&OElielp;" "&OElielp;$0" "Uppercase ligature OE Œ")
				   ("&oelig;" "&oelig;$0" "Lowercase ligature OE œ")
				   ("&Scaron;" "&Scaron;$0" "Uppercase S with caron Š")
				   ("&scaron;" "&scaron;$0" "Lowercase S with caron š")
				   ("&Yuml;" "&Yuml;$0" "Capital Y with diaeres Ÿ")
				   ("&fnof;" "&fnof;$0" "Lowercase with hook ƒ")
				   ("&circ;" "&circ;$0" "Circumflex accent ˆ")
				   ("&tilde;" "&tilde;$0" "Tilde ˜")
				   ("&ensp;" "&ensp;$0" "E space  ")
				   ("&emsp;" "&emsp;$0" "E space  ")
				   ("&thinsp;" "&thinsp;$0" "Thin space  ")
				   ("&zwni;" "&zwnj;$0" "Zero width non-joiner")
				   ("&zwi;" "&zwj;$0" "Zer width joiner")
				   ("&lrm;" "&lrm;$0" "Left-to-right mark")
				   ("&rlm;" "&rlm;$0" "Right-to-left mark")
				   ("&ndash;" "&ndash;$0" "E dash –")
				   ("&mdash;" "&mdash;$0" "E dash —")
				   ("&lsquo;" "&lsquo;$0" "Left single quotation mark ‘")
				   ("&rsquo;" "&rsquo;$0" "Right single quotation mark ’")
				   ("&sbquo;" "&sbquo;$0" "Single low-9 quotation mark ‚")
				   ("&ldquo;" "&ldquo;$0" "Left double quotation mark “")
				   ("&rdquo;" "&rdquo;$0" "Right double quotation mark ”")
				   ("&bdquo;" "&bdquo;$0" "Double low-9 quotation mark „")
				   ("&dagger;" "&dagger;$0" "Dagger †")
				   ("&Dagger;" "&Dagger;$0" "Double dagger ‡")
				   ("&bull;" "&bull;$0" "Bullet •")
				   ("&hellip;" "&hellip;$0" "Horizontal ellipsis …")
				   ("&permil;" "&permil;$0" "Per mille ‰")
				   ("&prime;" "&prime;$0" "Minutes (Degrees) ′")
				   ("&Prime;" "&Prime;$0" "Seconds (Degrees) ″")
				   ("&lsaquo;" "&lsaquo;$0" "Single left angle quotation ‹")
				   ("&rsaquo;" "&rsaquo;$0" "Single right angle quotation ›")
				   ("&oline;" "&oline;$0" "Overline ‾")
				   ("&euro;" "&euro;$0" "Euro €")
				   ("&trade;" "&trade;$0" "Trademark ™")
				   ("&larr;" "&larr;$0" "Left arrow ←")
				   ("&uarr;" "&uarr;$0" "Up arrow ↑")
				   ("&rarr;" "&rarr;$0" "Right arrow →")
				   ("&darr;" "&darr;$0" "Down arrow ↓")
				   ("&harr;" "&harr;$0" "Left right arrow ↔")
				   ("&crarr;" "&crarr;$0" "Carriage return arrow ↵")
				   ("&lceil;" "&lceil;$0" "Left ceiling ⌈")
				   ("&rceil;" "&rceil;$0" "Right ceiling ⌉")
				   ("&lfloor;" "&lfloor;$0" "Left floor ⌊")
				   ("&rfloor;" "&rfloor;$0" "Right floor ⌋")
				   ("&loz;" "&loz;$0" "Lozenge ◊")
				   ("&spades;" "&spades;$0" "Spade ♠")
				   ("&clubs;" "&clubs;$0" "Club ♣")
				   ("&hearts;" "&hearts;$0" "Heart ♥")
				   ("&diams;" "&diams;$0" "Diamond ♦")))

(defconst attr-completions
  '(
    #("accept" 0 1 (:annotation "Attr" :help "Specifies the types of files that the server accepts (only for  type=\"file\")"))
    #("accept-charset" 0 1 (:annotation "Attr" :help "Specifies the character encodings that are to be used for the form submission"))
    #("action" 0 1 (:annotation "Attr" :help "Specifies where to send the form-data when a form is submitted"))
    #("align" 0 1 (:annotation "Attr" :help "Specifies the alignment according to surrounding elements. Use CSS instead"))
    #("alt" 0 1 (:annotation "Attr" :help "Specifies an alternate text when the original element fails to display"))
    #("async" 0 1 (:annotation "Attr" :help "Specifies that the script is executed asynchronously (only for external scripts)"))
    #("autocomplete" 0 1 (:annotation "Attr" :help "Specifies whether the <form> or the <input> element should have autocomplete enabled"))
    #("autoplay" 0 1 (:annotation "Attr" :help "Specifies that the audio/video will start playing as soon as it is ready"))
    #("bgcolor" 0 1 (:annotation "Attr" :help "Specifies the background color of an element. Use CSS instead"))
    #("border" 0 1 (:annotation "Attr" :help "Specifies the width of the border of an element. Use CSS instead"))
    #("charset" 0 1 (:annotation "Attr" :help "Specifies the character encoding"))
    #("checked" 0 1 (:annotation "Attr" :help "Specifies that an <input> element should be pre-selected when the page loads (for type=\"checkbox\" or type=\"radio\")"))
    #("cite" 0 1 (:annotation "Attr" :help "Specifies a URL which explains the quote/deleted/inserted text"))
    #("color" 0 1 (:annotation "Attr" :help "Specifies the text color of an element. Use CSS instead"))
    #("cols" 0 1 (:annotation "Attr" :help "Specifies the visible width of a text area"))
    #("colspan" 0 1 (:annotation "Attr" :help "Specifies the number of columns a table cell should span"))
    #("content" 0 1 (:annotation "Attr" :help "Gives the value associated with the http-equiv or name attribute"))
    #("controls" 0 1 (:annotation "Attr" :help "Specifies that audio/video controls should be displayed (such as a play/pause button etc)"))
    #("coords" 0 1 (:annotation "Attr" :help "Specifies the coordinates of the area"))
    #("data" 0 1 (:annotation "Attr" :help "Specifies the URL of the resource to be used by the object"))
    #("datetime" 0 1 (:annotation "Attr" :help "Specifies the date and time"))
    #("default" 0 1 (:annotation "Attr" :help "Specifies that the track is to be enabled if the user's preferences do not indicate that another track would be more  appropriate"))
    #("defer" 0 1 (:annotation "Attr" :help "Specifies that the script is executed when the page has finished parsing (only for external scripts)"))
    #("dirname" 0 1 (:annotation "Attr" :help "Specifies that the text direction will be submitted"))
    #("disabled" 0 1 (:annotation "Attr" :help "Specifies that the specified element/group of elements should be disabled"))
    #("download" 0 1 (:annotation "Attr" :help "Specifies that the target will be downloaded when a user clicks on the hyperlink"))
    #("enctype" 0 1 (:annotation "Attr" :help "Specifies how the form-data should be encoded when submitting it to the server (only for  method=\"post\")"))
    #("for" 0 1 (:annotation "Attr" :help "Specifies which form element(s) a label/calculation is bound to"))
    #("form" 0 1 (:annotation "Attr" :help "Specifies the name of the form the element belongs to"))
    #("formaction" 0 1 (:annotation "Attr" :help "Specifies where to send the form-data when a form is submitted. Only for type=\"submit\""))
    #("headers" 0 1 (:annotation "Attr" :help "Specifies one or more headers cells a cell is related to"))
    #("height" 0 1 (:annotation "Attr" :help "Specifies the height of the element"))
    #("high" 0 1 (:annotation "Attr" :help "Specifies the range that is considered to be a high value"))
    #("href" 0 1 (:annotation "Attr" :help "Specifies the URL of the page the link goes to"))
    #("hreflang" 0 1 (:annotation "Attr" :help "Specifies the language of the linked document"))
    #("http-equiv" 0 1 (:annotation "Attr" :help "Provides an HTTP header for the information/value of the content attribute"))
    #("inert" 0 1 (:annotation "Attr" :help "Specifies that the browser should ignore this section"))
    #("ismap" 0 1 (:annotation "Attr" :help "Specifies an image as a server-side image map"))
    #("kind" 0 1 (:annotation "Attr" :help "Specifies the kind of text track"))
    #("label" 0 1 (:annotation "Attr" :help "Specifies the title of the text track"))
    #("list" 0 1 (:annotation "Attr" :help "Refers to a <datalist> element that contains pre-defined options for an <input> element"))
    #("loop" 0 1 (:annotation "Attr" :help "Specifies that the audio/video will start over again, every time it is finished"))
    #("low" 0 1 (:annotation "Attr" :help "Specifies the range that is considered to be a low value"))
    #("max" 0 1 (:annotation "Attr" :help "Specifies the maximum value"))
    #("maxlength" 0 1 (:annotation "Attr" :help "Specifies the maximum number of characters allowed in an element"))
    #("media" 0 1 (:annotation "Attr" :help "Specifies what media/device the linked document is optimized for"))
    #("method" 0 1 (:annotation "Attr" :help "Specifies the HTTP method to use when sending form-data"))
    #("min" 0 1 (:annotation "Attr" :help "Specifies a minimum value"))
    #("multiple" 0 1 (:annotation "Attr" :help "Specifies that a user can enter more than one value"))
    #("muted" 0 1 (:annotation "Attr" :help "Specifies that the audio output of the video should be muted"))
    #("name" 0 1 (:annotation "Attr" :help "Specifies the name of the element"))
    #("novalidate" 0 1 (:annotation "Attr" :help "Specifies that the form should not be validated when submitted"))
    #("onabort" 0 1 (:annotation "Attr" :help "Script to be run on abort"))
    #("onafterprint" 0 1 (:annotation "Attr" :help "Script to be run after the document is printed"))
    #("onbeforeprint" 0 1 (:annotation "Attr" :help "Script to be run before the document is printed"))
    #("onbeforeunload" 0 1 (:annotation "Attr" :help "Script to be run when the document is about to be unloaded"))
    #("onblur" 0 1 (:annotation "Attr" :help "Script to be run when the element loses focus"))
    #("oncanplay" 0 1 (:annotation "Attr" :help "Script to be run when a file is ready to start playing (when it has buffered enough to begin)"))
    #("oncanplaythrough" 0 1 (:annotation "Attr" :help "Script to be run when a file can be played all the way to the end without pausing for buffering"))
    #("onchange" 0 1 (:annotation "Attr" :help "Script to be run when the value of the element is changed"))
    #("onclick" 0 1 (:annotation "Attr" :help "Script to be run when the element is being clicked"))
    #("oncontextmenu" 0 1 (:annotation "Attr" :help "Script to be run when a context menu is triggered"))
    #("oncopy" 0 1 (:annotation "Attr" :help "Script to be run when the content of the element is being copied"))
    #("oncuechange" 0 1 (:annotation "Attr" :help "Script to be run when the cue changes in a <track> element"))
    #("oncut" 0 1 (:annotation "Attr" :help "Script to be run when the content of the element is being cut"))
    #("ondblclick" 0 1 (:annotation "Attr" :help "Script to be run when the element is being double-clicked"))
    #("ondrag" 0 1 (:annotation "Attr" :help "Script to be run when the element is being dragged"))
    #("ondragend" 0 1 (:annotation "Attr" :help "Script to be run at the end of a drag operation"))
    #("ondragenter" 0 1 (:annotation "Attr" :help "Script to be run when an element has been dragged to a valid drop target"))
    #("ondragleave" 0 1 (:annotation "Attr" :help "Script to be run when an element leaves a valid drop target"))
    #("ondragover" 0 1 (:annotation "Attr" :help "Script to be run when an element is being dragged over a valid drop target"))
    #("ondragstart" 0 1 (:annotation "Attr" :help "Script to be run at the start of a drag operation"))
    #("ondrop" 0 1 (:annotation "Attr" :help "Script to be run when dragged element is being dropped"))
    #("ondurationchange" 0 1 (:annotation "Attr" :help "Script to be run when the length of the media changes"))
    #("onemptied" 0 1 (:annotation "Attr" :help "Script to be run when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects)"))
    #("onended" 0 1 (:annotation "Attr" :help "Script to be run when the media has reach the end (a useful event for messages like \"thanks for listening\")"))
    #("onerror" 0 1 (:annotation "Attr" :help "Script to be run when an error occurs"))
    #("onfocus" 0 1 (:annotation "Attr" :help "Script to be run when the element gets focus"))
    #("onhashchange" 0 1 (:annotation "Attr" :help "Script to be run when there has been changes to the anchor part of the a URL"))
    #("oninput" 0 1 (:annotation "Attr" :help "Script to be run when the element gets user input"))
    #("oninvalid" 0 1 (:annotation "Attr" :help "Script to be run when the element is invalid"))
    #("onkeydown" 0 1 (:annotation "Attr" :help "Script to be run when a user is pressing a key"))
    #("onkeypress" 0 1 (:annotation "Attr" :help "Script to be run when a user presses a key"))
    #("onkeyup" 0 1 (:annotation "Attr" :help "Script to be run when a user releases a key"))
    #("onload" 0 1 (:annotation "Attr" :help "Script to be run when the is finished loading"))
    #("onloadeddata" 0 1 (:annotation "Attr" :help "Script to be run when media data is loaded"))
    #("onloadedmetadata" 0 1 (:annotation "Attr" :help "Script to be run when meta data (like dimensions and duration) are loaded"))
    #("onloadstart" 0 1 (:annotation "Attr" :help "Script to be run just as the file begins to load before anything is actually loaded"))
    #("onmousedown" 0 1 (:annotation "Attr" :help "Script to be run when a mouse button is pressed down on an element"))
    #("onmousemove" 0 1 (:annotation "Attr" :help "Script to be run as long as the  mouse pointer is moving over an element"))
    #("onmouseout" 0 1 (:annotation "Attr" :help "Script to be run when a mouse pointer moves out of an element"))
    #("onmouseover" 0 1 (:annotation "Attr" :help "Script to be run when a mouse pointer moves over an element"))
    #("onmouseup" 0 1 (:annotation "Attr" :help "Script to be run when a mouse button is released over an element"))
    #("onmousewheel" 0 1 (:annotation "Attr" :help "Script to be run when a mouse wheel is being scrolled over an element"))
    #("onoffline" 0 1 (:annotation "Attr" :help "Script to be run when the browser starts to work offline"))
    #("ononline" 0 1 (:annotation "Attr" :help "Script to be run when the browser starts to work online"))
    #("onpagehide" 0 1 (:annotation "Attr" :help "Script to be run when a user navigates away from a page"))
    #("onpageshow" 0 1 (:annotation "Attr" :help "Script to be run when a user navigates to a page"))
    #("onpaste" 0 1 (:annotation "Attr" :help "Script to be run when the user pastes some content in an element"))
    #("onpause" 0 1 (:annotation "Attr" :help "Script to be run when the media is paused either by the user or programmatically"))
    #("onplay" 0 1 (:annotation "Attr" :help "Script to be run when the media has started playing"))
    #("onplaying" 0 1 (:annotation "Attr" :help "Script to be run when the media has started playing"))
    #("onpopstate" 0 1 (:annotation "Attr" :help "Script to be run when the window's history changes."))
    #("onprogress" 0 1 (:annotation "Attr" :help "Script to be run when the browser is in the process of getting the media data"))
    #("onratechange" 0 1 (:annotation "Attr" :help "Script to be run each time the playback rate changes (like when a user switches to a slow motion or fast forward  mode)."))
    #("onreset" 0 1 (:annotation "Attr" :help "Script to be run when a reset button in a form is clicked."))
    #("onresize" 0 1 (:annotation "Attr" :help "Script to be run when the browser window is being resized."))
    #("onscroll" 0 1 (:annotation "Attr" :help "Script to be run when an element's scrollbar is being scrolled"))
    #("onsearch" 0 1 (:annotation "Attr" :help "Script to be run when the user writes something in a search field (for <input type=\"search\">)"))
    #("onseeked" 0 1 (:annotation "Attr" :help "Script to be run when the seeking attribute is set to false indicating that seeking has ended"))
    #("onseeking" 0 1 (:annotation "Attr" :help "Script to be run when the seeking attribute is set to true indicating that seeking is active"))
    #("onselect" 0 1 (:annotation "Attr" :help "Script to be run when the element gets selected"))
    #("onstalled" 0 1 (:annotation "Attr" :help "Script to be run when the browser is unable to fetch the media data for whatever reason"))
    #("onstorage" 0 1 (:annotation "Attr" :help "Script to be run when a Web Storage area is updated"))
    #("onsubmit" 0 1 (:annotation "Attr" :help "Script to be run when a form is submitted"))
    #("onsuspend" 0 1 (:annotation "Attr" :help "Script to be run when fetching the media data is stopped before it is completely loaded for whatever reason"))
    #("ontimeupdate" 0 1 (:annotation "Attr" :help "Script to be run when the playing position has changed (like when the user fast forwards to a different point in the media)"))
    #("ontoggle" 0 1 (:annotation "Attr" :help "Script to be run when the user opens or closes the <details> element"))
    #("onunload" 0 1 (:annotation "Attr" :help "Script to be run when a page has unloaded (or the browser window has been closed)"))
    #("onvolumechange" 0 1 (:annotation "Attr" :help "Script to be run each time the volume of a video/audio has been changed"))
    #("onwaiting" 0 1 (:annotation "Attr" :help "Script to be run when the media has paused but is expected to resume (like when the media pauses to buffer more data)"))
    #("onwheel" 0 1 (:annotation "Attr" :help "Script to be run when the mouse wheel rolls up or down over an element"))
    #("open" 0 1 (:annotation "Attr" :help "Specifies that the details should be visible (open) to the user"))
    #("optimum" 0 1 (:annotation "Attr" :help "Specifies what value is the optimal value for the gauge"))
    #("pattern" 0 1 (:annotation "Attr" :help "Specifies a regular expression that an <input> element's value is checked against"))
    #("placeholder" 0 1 (:annotation "Attr" :help "Specifies a short hint that describes the expected value of the element"))
    #("popovertarget" 0 1 (:annotation "Attr" :help "Specifies which popover element to invokde"))
    #("popovertargetaction" 0 1 (:annotation "Attr" :help "Specifies what happens to the popover element when the button is clicked"))
    #("poster" 0 1 (:annotation "Attr" :help "Specifies an image to be shown while the video is downloading, or until the user hits the play button"))
    #("preload" 0 1 (:annotation "Attr" :help "Specifies if and how the author thinks the audio/video should be loaded when the page loads"))
    #("readonly" 0 1 (:annotation "Attr" :help "Specifies that the element is read-only"))
    #("rel" 0 1 (:annotation "Attr" :help "Specifies the relationship between the current document and the linked document"))
    #("required" 0 1 (:annotation "Attr" :help "Specifies that the element must be filled out before submitting the form"))
    #("reversed" 0 1 (:annotation "Attr" :help "Specifies that the list order should be descending (9,8,7...)"))
    #("rows" 0 1 (:annotation "Attr" :help "Specifies the visible number of lines in a text area"))
    #("rowspan" 0 1 (:annotation "Attr" :help "Specifies the number of rows a table cell should span"))
    #("sandbox" 0 1 (:annotation "Attr" :help "Enables an extra set of restrictions for the content in an <iframe>"))
    #("scope" 0 1 (:annotation "Attr" :help "Specifies whether a header cell is a header for a column, row, or group of columns or rows"))
    #("selected" 0 1 (:annotation "Attr" :help "Specifies that an option should be pre-selected when the page loads"))
    #("shape" 0 1 (:annotation "Attr" :help "Specifies the shape of the area"))
    #("size" 0 1 (:annotation "Attr" :help "Specifies the width, in characters (for <input>) or specifies the number of visible options (for <select>)"))
    #("sizes" 0 1 (:annotation "Attr" :help "Specifies the size of the linked resource"))
    #("span" 0 1 (:annotation "Attr" :help "Specifies the number of columns to span"))
    #("src" 0 1 (:annotation "Attr" :help "Specifies the URL of the media file"))
    #("srcdoc" 0 1 (:annotation "Attr" :help "Specifies the HTML content of the page to show in the <iframe>"))
    #("srclang" 0 1 (:annotation "Attr" :help "Specifies the language of the track text data (required if kind=\"subtitles\")"))
    #("srcset" 0 1 (:annotation "Attr" :help "Specifies the URL of the image to use in different situations"))
    #("start" 0 1 (:annotation "Attr" :help "Specifies the start value of an ordered list"))
    #("step" 0 1 (:annotation "Attr" :help "Specifies the legal number intervals for an input field"))
    #("target" 0 1 (:annotation "Attr" :help "Specifies the target for where to open the linked document or where to submit the form"))
    #("type" 0 1 (:annotation "Attr" :help "Specifies the type of element"))
    #("usemap" 0 1 (:annotation "Attr" :help "Specifies an image as a client-side image map"))
    #("value" 0 1 (:annotation "Attr" :help "Specifies the value of the element"))
    #("width" 0 1 (:annotation "Attr" :help "Specifies the width of the element"))
    #("wrap" 0 1 (:annotation "Attr" :help "Specifies how the text in a text area is to be wrapped when submitted in a form"))
    ))

(defconst company-html--global-attr-completions
  '(
    #("accesskey" 0 1 (:annotation "Attr" :help "Specifies a shortcut key to activate/focus an element"))
    #("autocapitalize" 0 1 (:annotation "Attr" :help ""))
    #("autofocus" 0 1 (:annotation "Attr" :help "Specifies that the element should automatically get focus when the page loads"))
    #("class" 0 1 (:annotation "Attr" :help "Specifies one or more classnames for an element (refers to a class in a style sheet)"))
    #("contenteditable" 0 1 (:annotation "Attr" :help "Specifies whether the content of an element is editable or not"))
    #("data-" 0 1 (:annotation "Attr" :help "Used to store custom data private to the page or application"))
    #("dir" 0 1 (:annotation "Attr" :help "Specifies the text direction for the content in an element"))
    #("draggable" 0 1 (:annotation "Attr" :help "Specifies whether an element is draggable or not"))
    #("enterkeyhint" 0 1 (:annotation "Attr" :help "Specifies the text of the enter-key on a virtual keybord"))
    #("exportparts" 0 1 (:annotation "Attr" :help ""))
    #("hidden" 0 1 (:annotation "Attr" :help "Specifies that an element is not yet, or is no longer, relevant"))
    #("id" 0 1 (:annotation "Attr" :help "Specifies a unique id for an element"))
    #("inert" 0 1 (:annotation "Attr" :help ""))
    #("inputmode" 0 1 (:annotation "Attr" :help "Specifies the mode of a virtual keyboard"))
    #("is" 0 1 (:annotation "Attr" :help ""))
    #("itemid" 0 1 (:annotation "Attr" :help ""))
    #("itemprop" 0 1 (:annotation "Attr" :help ""))
    #("itemref" 0 1 (:annotation "Attr" :help ""))
    #("itemscope" 0 1 (:annotation "Attr" :help ""))
    #("itemtype" 0 1 (:annotation "Attr" :help ""))
    #("lang" 0 1 (:annotation "Attr" :help "Specifies the language of the element's content"))
    #("nonce" 0 1 (:annotation "Attr" :help ""))
    #("part" 0 1 (:annotation "Attr" :help ""))
    #("popover" 0 1 (:annotation "Attr" :help "Specifies a popover element"))
    #("role" 0 1 (:annotation "Attr" :help ""))
    #("slot" 0 1 (:annotation "Attr" :help ""))
    #("spellcheck" 0 1 (:annotation "Attr" :help "Specifies whether the element is to have its spelling and grammar checked or not"))
    #("style" 0 1 (:annotation "Attr" :help "Specifies an inline CSS style for an element"))
    #("tabindex" 0 1 (:annotation "Attr" :help "Specifies the tabbing order of an element"))
    #("title" 0 1 (:annotation "Attr" :help "Specifies extra information about an element"))
    #("translate" 0 1 (:annotation "Attr" :help "Specifies whether the content of an element should be translated or not"))
    #("virtualkeyboardpolicy" 0 1 (:annotation "Attr" :help ""))
    ))

(defvar company-html--current-context "")

(defun get-completions (context prefix)
  (cl-remove-if-not (lambda (c) (string-prefix-p prefix c))
		    (cond
		     ((string-suffix-p "\"" context) nil)
		     ((and (> (length context) 1) (string-prefix-p "<" context)) (append attr-completions company-html--global-attr-completions))
		     (t nil))))

(defun company-html-annotation (s)
  (format " %s" (get-text-property 0 :annotation s)))

(defun company-html-meta (s)
  (get-text-property 0 :help s))

(defun company-html (command &optional arg &rest ignored)
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'company-html))
    (prefix (when (looking-back "\\([<]*?[^</>]*?\\)\\([!&]?[a-zA-Z1-6]+\\)" 50 t)
	      (setq company-html--current-context (match-string 1))
	      ;; (message ":%s:%s:" company-html--current-context (match-string 2))
	      (match-string 2)))
    (candidates (get-completions company-html--current-context arg))
    (meta (company-html-meta arg))
    (annotation (company-html-annotation arg))
    (post-completion (when (string= (company-html-annotation arg) " Attr")
		       ;; (message "post-completion:%s" arg)
		       (insert "=\"\"")
		       (backward-char 1)))
    (kind t)))

(provide 'company-html)
